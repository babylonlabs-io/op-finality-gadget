{
  "contract_name": "op-finality-gadget",
  "contract_version": "0.7.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "admin",
      "consumer_id"
    ],
    "properties": {
      "admin": {
        "type": "string"
      },
      "consumer_id": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "commit_public_randomness"
        ],
        "properties": {
          "commit_public_randomness": {
            "type": "object",
            "required": [
              "commitment",
              "fp_pubkey_hex",
              "num_pub_rand",
              "signature",
              "start_height"
            ],
            "properties": {
              "commitment": {
                "description": "`commitment` is the commitment of these public randomness values. Currently, it's the root of the Merkle tree that includes the public randomness",
                "allOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ]
              },
              "fp_pubkey_hex": {
                "description": "`fp_pubkey_hex` is the BTC PK of the finality provider that commits the public randomness",
                "type": "string"
              },
              "num_pub_rand": {
                "description": "`num_pub_rand` is the amount of public randomness committed",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "signature": {
                "description": "`signature` is the signature on (start_height || num_pub_rand || commitment) signed by the SK corresponding to `fp_pubkey_hex`. This prevents others committing public randomness on behalf of `fp_pubkey_hex`",
                "allOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ]
              },
              "start_height": {
                "description": "`start_height` is the start block height of the list of public randomness",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Submit Finality Signature.\n\nThis is a message that can be called by a finality provider to submit their finality signature to the Consumer chain. The signature is verified by the Consumer chain using the finality provider's public key\n\nThis message is equivalent to the `MsgAddFinalitySig` message in the Babylon finality protobuf defs.",
        "type": "object",
        "required": [
          "submit_finality_signature"
        ],
        "properties": {
          "submit_finality_signature": {
            "type": "object",
            "required": [
              "block_hash",
              "fp_pubkey_hex",
              "height",
              "proof",
              "pub_rand",
              "signature"
            ],
            "properties": {
              "block_hash": {
                "$ref": "#/definitions/Binary"
              },
              "fp_pubkey_hex": {
                "type": "string"
              },
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "proof": {
                "$ref": "#/definitions/Proof"
              },
              "pub_rand": {
                "$ref": "#/definitions/Binary"
              },
              "signature": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Proof": {
        "description": "A `Proof` is a proof of a leaf's existence in a Merkle tree.\n\nThe convention for proofs is to include leaf hashes, but to exclude the root hash. This convention is implemented across IAVL range proofs as well. Keep this consistent unless there's a very good reason to change everything. This affects the generalized proof system as well.\n\nEquivalent to / adapted from cometbft/crypto/merkle/proof.go.",
        "type": "object",
        "required": [
          "aunts",
          "index",
          "leaf_hash",
          "total"
        ],
        "properties": {
          "aunts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Binary"
            }
          },
          "index": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "leaf_hash": {
            "$ref": "#/definitions/Binary"
          },
          "total": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "query_block_finalized"
        ],
        "properties": {
          "query_block_finalized": {
            "type": "object",
            "required": [
              "hash",
              "height",
              "timestamp"
            ],
            "properties": {
              "hash": {
                "type": "string"
              },
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "timestamp": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object"
  },
  "sudo": null,
  "responses": {
    "query_block_finalized": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryBlockFinalizedResponse",
      "type": "object",
      "required": [
        "finalized"
      ],
      "properties": {
        "finalized": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    }
  }
}
